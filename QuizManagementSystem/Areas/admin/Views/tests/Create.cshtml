@using QuizManagementSystem.Common;

@model Model.EF.Test

@{
    ViewBag.Title = "Tạo đề thi";
    Layout = "~/Areas/admin/Views/Shared/_Layout.cshtml";
}

@section breadcrumb{
    Tạo đề thi
}

@section jsFooter{
    <script>
        $(document).ready(function () {
            var grades = $('#GradeID');

            $('#SchoolYearID').change(function () {
                var id = $(this).val();
                $('#GradeID').html(null);
                $.getJSON("/admin/tests/FillGrades", { schoolyearId: id }, function (data) {
                    grades.append($('<option></option>').val("0").text(""));
                    $.each(data, function (i, item) {
                        grades.append($('<option></option>').val(item.Value).text(item.Text));
                    });
                });
            });
        });

        $(document).ready(function () {
            var subj = $('#SubjectID');
            $('#SubjectID').html(null);
            $('#GradeID').change(function () {
                var id = $(this).val();
                $('#SubjectID').html(null);
                $.getJSON("/admin/tests/FillSubjects", { gradeId: id }, function (data) {
                    $.each(data, function (i, item) {
                        subj.append($('<option></option>').val(item.Value).text(item.Text));
                    });
                });
            });
        });

        $(document).ready(function () {
            var examinee = $('#ExamineeID');
            examinee.html('');
            $('#ExamID').change(function () {
                var id = $(this).val();
                var str = "";
                examinee.html('');
                $.getJSON("/admin/tests/FillExaminee", { examsId: id }, function (data) {
                    $.each(data, function (i, item) {
                        str += item.Text;
                        if (item.Text != null)
                        {
                            str += ", "
                        }
                    });
                    examinee.val(str);
                });  
            });
        });
    </script>

}


@using (Html.BeginForm("Create", "tests", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Thông tin đề thi</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("Kỳ thi", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ExamID", null, "--- Chọn kỳ thi ---", htmlAttributes: new { @class = "form-control", @id = "ExamID" })
                @Html.ValidationMessageFor(model => model.ExamID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Thí sinh", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("ExamineeID", "", htmlAttributes: new { @class = "form-control", @id = "ExamineeID", @readonly = "readonly" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Mã đề", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CodeTestArr, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                @Html.ValidationMessageFor(model => model.CodeTestArr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Mô tả", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Số câu hỏi", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NumberOfQuestions, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NumberOfQuestions, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Phương án chọn câu hỏi", htmlAttributes: new { @class = "control-label col-md-2", @id = "QuizSelection" })
            <div class="col-md-10">
                @Html.DropDownList("QuizSelection", new List<SelectListItem>
                   {
                       new SelectListItem{ Text = "Ngẫu nhiên", Value = "" + ConstantVariable.RandomQuiz},
                       new SelectListItem{ Text = "Câu hỏi mới nhất", Value = "" + ConstantVariable.NewQuiz},
                       new SelectListItem{ Text = "Thủ công", Value = "" + ConstantVariable.ManualQuiz}
                   }, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.QuizSelection, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Câu hỏi của mỗi đề", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("FixedOrChanged", new List<SelectListItem>
                   {
                       new SelectListItem{ Text = "Khác nhau ở mỗi đề", Value = "" + ConstantVariable.ChangedQuiz},
                       new SelectListItem{ Text = "Cố định ở mỗi đề", Value = "" + ConstantVariable.FixedQuiz},
                   }, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.FixedOrChanged, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Trộn đề & câu hỏi", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.RadioButtonFor(model => model.Mix, ConstantVariable.MixQuiz, new { htmlAttributes = new { @class = "form-control" } }) Trộn câu hỏi <br />
                @Html.RadioButtonFor(model => model.Mix, ConstantVariable.MixAnswer, new { htmlAttributes = new { @class = "form-control" } }) Trộn đáp án <br />
                @Html.RadioButtonFor(model => model.Mix, ConstantVariable.MixAll, new { htmlAttributes = new { @class = "form-control" } }) Trộn câu hỏi và đáp án <br />
                @Html.RadioButtonFor(model => model.Mix, ConstantVariable.NoMix, new { htmlAttributes = new { @class = "form-control" } }) Không trộn <br />
                @Html.ValidationMessageFor(model => model.Mix, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.Label("Thời gian làm bài (phút)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Thang điểm", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ScoreLadderID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ScoreLadderID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Trạng thái", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.DropDownList("Status", new List<SelectListItem>
                                   {
                                       new SelectListItem{ Text = "Mở", Value = "True"},
                                       new SelectListItem{ Text = "Đóng", Value = "False"}
                                   }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Tạo" class="btn btn-primary pull-right" style="width: 100px" />
                <a class="btn btn-info" href="/admin/tests">Quay lại</a>
            </div>
        </div>
    </div>
}
<br />
<br />
