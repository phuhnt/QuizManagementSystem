@using PagedList;
@using PagedList.Mvc;
@using Model.DAO;
@using QuizManagementSystem.Common;
@using Model.EF;
@model Model.EF.Test

@{
    Layout = null;
}

<!DOCTYPE html>

<html lang="vi">
<head>
    <title>Bắt đầu bài thi | Quiz Management System</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="Quiz Management System">
    <!-- Bootstrap core CSS-->
    <link href="~/Assets/Admin/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/Assets/Admin/vendor/bootstrap/css/bootstrap-grid.min.css" rel="stylesheet" />
    <link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
    <link href="~/Assets/Admin/css/my-custom.css" rel="stylesheet" />
    <!-- Custom fonts for this template-->
    <link href="~/Assets/Admin/vendor/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <!-- Bootstrap core JavaScript-->
    <script src="~/Assets/Admin/vendor/jquery/jquery.min.js"></script>
    <script src="/Assets/Admin/js/plugins/countdown/js/jquery.countdown.js"></script>
    <script src="~/Assets/Admin/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/Assets/Admin/vendor/bootstrap/js/bootstrap.js"></script>

</head>
<body>
    <div class="container">
        <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
            <!-- Brand/logo -->
            <a class="navbar-brand" href="/">Quiz Management System</a>
            @{
                var session = Session[ConstantVariable.USER_SESSION] as UserLogin;

            }
            <!-- Links -->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/home/active">Đề thi đang mở</a>
                </li>
                @{
                    if (session != null)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/home/mytest">Đề thi của tôi</a>
                        </li>
                    }
                }
            </ul>
            @{
                if (session == null)
                {
                    <ul class="navbar-nav navbar-right ml-auto">
                        <li class="nav-item">
                            <a class="nav-link" href="/user/login">
                                <i class="fa fa-fw fa-sign-in"></i>Đăng nhập
                            </a>
                        </li>
                    </ul>
                }
                else
                {
                    <ul class="navbar-nav navbar-right ml-auto">
                        <li class="dropdown dropdown-menu-right">
                            <button class="btn btn-dark dropdown-toggle" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <img src="@session.Avatar" class="img-circle" style="width: 32px; height: 32px" /> Xin chào, @session.UserName!
                            </button>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" href="/user/info/@session.UserID">Thông tin tài khoản</a>
                                <a class="dropdown-item" href="/user/historyexams/@session.UserID">Lịch sử thi</a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="/user/Logout">Thoát</a>
                            </div>
                        </li>
                    </ul>
                }
            }
        </nav>
    </div>
    <hr />
    <div class="countdown">
        <span id="clock" class="border border-warning text-center countdown-custom"></span>
    </div>

    @{

        var quizList = new TestDAO().GetAllQuiz(Model.Id);
        <div class="list-quiz border border-success">
            @for (int i = 1; i <= quizList.Count; i++)
            {
                if (i % 2 != 0)
                {
                    <div class="col-md-6">
                        <a href="#@i" class="@i">Câu @i</a><br />
                    </div>
                }
                else
                {
                    <div class="col-md-6">
                        <a href="#@i" class="@i">Câu @i</a><br />
                    </div>
                }

            }
        </div>

    }

    @using (Html.BeginForm("StartTheTest", "exams", FormMethod.Post, new { @id = "TestForm" }))
    {
        @Html.AntiForgeryToken()


        <button type="button" class="btn btn-primary btn-submit-test" name="btnSubmit" data-toggle="modal" data-target="#myModal">Nộp bài</button>
        <div class="modal fade" tabindex="-1" role="dialog" id="myModal">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Nộp bài</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Bạn có chắc rằng nộp bài sẽ kết thúc bài thi này?</p>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-primary" value="OK">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="wrapper">
            <div class="card">
                <div class="card-body text-center">
                    <strong> @Model.Exam.Titile.ToUpper()</strong><br />
                    <strong>Môn thi: @Model.Exam.Subject.Name</strong><br />
                    <strong>Mã đề: @Model.CodeTest</strong><br />
                    @{
                        if (Model.Time == null | Model.Time == 0)
                        {
                            <i>Thời gian làm bài: không giới hạn thời gian</i><br />
                        }
                        else
                        {
                            <i>Thời gian làm bài: @Model.Time (phút)</i><br />
                        }
                    }
                </div>
            </div>
            <hr />
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.CodeTest)
            @Html.HiddenFor(x => x.ExamID)

            @{
                List<Question> quizListIndex = new List<Question>();

                if (Model.MixQuiz == true)
                {
                    int _min = 1000;
                    for (int p = 0; p < quizList.Count; p++)
                    {
                        string _pattern = "<" + Model.CodeTest.ToString() + ">";
                        int startIndex = quizList[p].MixQuiz.IndexOf(_pattern);
                        _pattern = "</" + _pattern.Substring(1);
                        int endIndex = quizList[p].MixQuiz.IndexOf(_pattern);

                        var _mixQuizCurr = quizList[p].MixQuiz.Substring(startIndex, endIndex + _pattern.Length - startIndex);
                        var indexCurr = int.Parse(Encode.StripCodeTestTag(_mixQuizCurr));

                        if (indexCurr == 0)
                        {
                            _min = 0;
                            quizListIndex.Add(quizList[p]);
                            break;
                        }
                    }
                    int count = 1;
                    do
                    {
                        for (int t = 0; t < quizList.Count; t++)
                        {
                            string _pattern = "<" + Model.CodeTest.ToString() + ">";
                            int startIndex = quizList[t].MixQuiz.IndexOf(_pattern);
                            _pattern = "</" + _pattern.Substring(1);
                            int endIndex = quizList[t].MixQuiz.IndexOf(_pattern);

                            var _mixQuiz = quizList[t].MixQuiz.Substring(startIndex, endIndex + _pattern.Length - startIndex);
                            var index = int.Parse(Encode.StripCodeTestTag(_mixQuiz));

                            if (index == (_min + 1))
                            {
                                count++;
                                _min = index;
                                quizListIndex.Add(quizList[t]);
                            }
                        }
                    } while (count < quizList.Count);
                }
                else
                {
                    quizListIndex = quizList.ToList();
                }

                for (int i = 1; i <= quizListIndex.Count; i++)
                {

                    char[] Alphabet = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J' };
                    string[] _answer = null;
                    <input type="checkbox" id="@i" data-toggle="tooltip" title="Đánh dấu câu hỏi này" /><strong id="@i">Câu @i: </strong>
                    @*@Html.Raw(quizList[i - 1].ContentQuestion);*@

                    @Html.Raw(quizListIndex[i - 1].ContentQuestion);

                    if (Model.MixAnswer == true)
                    {
                        string _pattern = "<" + Model.CodeTest.ToString() + ">";
                        int startIndex = quizListIndex[i - 1].MixAnswer.IndexOf(_pattern);
                        _pattern = "</" + _pattern.Substring(1);
                        int endIndex = quizListIndex[i - 1].MixAnswer.IndexOf(_pattern);
                        var _mixAnswer = quizListIndex[i - 1].MixAnswer.Substring(startIndex, endIndex + _pattern.Length - startIndex);

                        _answer = System.Text.RegularExpressions.Regex.Split(Encode.StripCodeTestTag(_mixAnswer), "\r\n");
                        int index = 0;
                        for (int j = 0; j < _answer.Length; j++)
                        {
                            if (!string.IsNullOrEmpty(_answer[j]) && _answer[j].Contains(Alphabet[index] + ". "))
                            {
                                <input type="radio" name="UserAnswer[@(i-1)]" value="@Alphabet[index]" /> @Html.Raw(Encode.StripPTag(_answer[j].ToString()))<br>
                                index++;
                            }

                        }
                        <hr />
                    }
                    else
                    {
                        _answer = System.Text.RegularExpressions.Regex.Split(quizListIndex[i - 1].AnswerText, "\r\n");
                        int index = 0;
                        for (int j = 0; j < _answer.Length; j++)
                        {
                            if (!string.IsNullOrEmpty(_answer[j]))
                            {
                                <input type="radio" name="UserAnswer[@(i-1)]" value="@Alphabet[index]" /> @Html.Raw(QuizManagementSystem.Common.Encode.StripPTag(_answer[j].ToString()))<br>
                                index++;
                            }

                        }
                        <hr />
                    }
                }
            }
        </div>
    }

    <!-- /.content-wrapper-->
    <footer class="sticky-footer">
        <div class="container wrapper">
            <div class="text-center">
                <small>Copyright UIT © Quiz Management System @DateTime.Now.Year</small>
            </div>
        </div>
    </footer>
    <br />

    <script>
        var timeToTake = new Date($.now()).getTime() + (@Model.Time * 60 * 1000);
        $('#clock').countdown(timeToTake)
            .on('update.countdown', function (e) {
                $(this).html(e.strftime('%H:%M:%S'));
            })
                .on('finish.countdown', function (e) {
                    $('#TestForm').submit();
        });

        $(document).ready(function () {

            $('input[type="checkbox"]').click(function (sender) {
                if ($(this).prop("checked") == true) {
                    id = sender.currentTarget.id;
                    //$("#" + id + "").css('color', 'red');
                    $("." + id + "").css('color', 'red');
                }
                else if ($(this).prop("checked") == false) {
                    //$("#" + id + "").css('color', 'blue');
                    $("." + id + "").css('color', 'blue');
                }
            });

            $('a[href^="#"]').on('click', function (e) {
                e.preventDefault();

                var target = this.hash,
                    $target = $(target);

                $('html, body').stop().animate({
                    'scrollTop': $target.offset().top
                }, 900, 'swing', function () {
                    window.location.hash = target;
                });
            });

        });
    </script>
</body>

</html>
